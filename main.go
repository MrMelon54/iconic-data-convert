package main

import (
	"bufio"
	_ "embed"
	"encoding/json"
	"flag"
	json2 "github.com/MrMelon54/iconic-data-convert/json"
	"github.com/MrMelon54/iconic-data-convert/scan-data"
	scan_modules "github.com/MrMelon54/iconic-data-convert/scan-modules"
	"github.com/MrMelon54/iconic-data-convert/scan-script"
	"log"
	"os"
	"sort"
)

var iconicScriptPath, iconicDataPath, iconicDataOutPath, moduleOrderPath string

func main() {
	flag.StringVar(&iconicScriptPath, "s", "iconicScript.cs", "iconicScript.cs file to parse")
	flag.StringVar(&iconicDataPath, "d", "iconicData.cs", "iconicData.cs file to parse")
	flag.StringVar(&iconicDataOutPath, "o", "iconicData.json", "iconicData.json file to output")
	flag.StringVar(&moduleOrderPath, "m", "modules.txt", "modules.txt file containing all the modules in order")
	flag.Parse()

	iconicScript, err := os.Open(iconicScriptPath)
	if err != nil {
		log.Fatal("Failed to open iconic script file: ", err)
	}
	iconicData, err := os.Open(iconicDataPath)
	if err != nil {
		log.Fatal("Failed to open iconic data file: ", err)
	}
	iconicOut, err := os.OpenFile(iconicDataOutPath, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0666)
	if err != nil {
		log.Fatal("Failed to open iconic output file: ", err)
	}
	orderFile, err := os.Open(moduleOrderPath)
	if err != nil {
		log.Fatal("Failed to open iconic modules file: ", err)
	}

	scriptScanner := bufio.NewScanner(iconicScript)
	scriptScanner.Split(bufio.ScanLines)
	dataScanner := bufio.NewScanner(iconicData)
	dataScanner.Split(bufio.ScanLines)
	outWriter := json.NewEncoder(iconicOut)
	outWriter.SetIndent("", "  ")
	orderScanner := bufio.NewScanner(orderFile)
	orderScanner.Split(bufio.ScanLines)

	log.Println("[INFO] Scanning modules.txt")
	moduleOrder := scan_modules.ScanIconicModules(log.Default(), orderScanner)
	if err := orderFile.Close(); err != nil {
		log.Fatal("[ERROR] Failed to close modules.txt: ", err)
	}

	log.Println("[INFO] Scanning iconicScript.cs")
	moduleMap := scan_script.ScanIconicScript(log.Default(), scriptScanner)
	if err := iconicScript.Close(); err != nil {
		log.Fatal("[ERROR] Failed to close iconicScript.cs: ", err)
	}

	log.Println("[INFO] Scanning iconicData.cs")
	iconicModules := scan_data.ScanIconicData(log.Default(), dataScanner, moduleMap, moduleOrder)
	if err := iconicData.Close(); err != nil {
		log.Fatal("[ERROR] Failed to close iconicData.cs: ", err)
	}

	sort.Slice(iconicModules, func(i, j int) bool {
		return iconicModules[i].Order < iconicModules[j].Order
	})

	if outWriter.Encode(json2.IconicData{
		Underscore: "Generated by KTaNE Iconic Editor. DO NOT EDIT.",
		Modules:    iconicModules,
	}) != nil {
		log.Fatal("[ERROR] Failed to write iconicData.json output: ", err)
	}
	if err := iconicOut.Close(); err != nil {
		log.Fatal("[ERROR] Failed to close iconicData.json: ", err)
	}
	log.Println("[INFO] Successfully wrote output file")
}
